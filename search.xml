<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Prettier-Eslint-Cli Does Not Format Anything in Powershell</title>
      <link href="/2019/05/01/prettier-eslint-cli-does-not-format-anything-in-powershell/"/>
      <url>/2019/05/01/prettier-eslint-cli-does-not-format-anything-in-powershell/</url>
      
        <content type="html"><![CDATA[<h2 id="prettier-eslint-and-prettier-stylelint-work-inside-bash-and-zsh-not-in-powershell-or-cmd"><a href="#prettier-eslint-and-prettier-stylelint-work-inside-bash-and-zsh-not-in-powershell-or-cmd" class="headerlink" title="prettier-eslint and prettier-stylelint work inside bash and zsh, not in powershell or cmd"></a>prettier-eslint and prettier-stylelint work inside bash and zsh, not in powershell or cmd</h2><p>Long story short, I’ve set up eslint and stylelint for one project weeks back and everything ran perfectly on MACs, until we ran it inside powershell and cmd, it output nothing. It almost felt like no file is to be formatted.</p><p>Scripts we had inside package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "fix-style": "prettier-stylelint --write 'src/**/*.&#123;css,scss&#125;' ",</span><br><span class="line">    "fix-code": "prettier-eslint --write 'src/**/*.&#123;js,jsx&#125;' "</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>After a couple hours of research, I accidentally saw this code on <a href="https://github.com/prettier/prettier-eslint-cli" target="_blank" rel="noopener">prettier-eslint-cli</a>, and I gave it a go. It worked..<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "format": "prettier-eslint \"src/**/*.js\""</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>Turns out, nothing wrong with dependencies, neither plugins in vscode. It just in powershell, double quote and single quote have different functions. Still not 100% sure, but it is very likely to relate to this <a href="https://devblogs.microsoft.com/scripting/weekend-scripter-understanding-quotation-marks-in-powershell/" target="_blank" rel="noopener">topic</a></p><p>To fix this issue, we simply updated the script to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"fix-style"</span>: <span class="string">"prettier-stylelint --write \"src/**/*.&#123;css,scss&#125;\" "</span>,</span><br><span class="line"><span class="string">"fix-code"</span>: <span class="string">"prettier-eslint --write \"src/**/*.&#123;js,jsx&#125;\" "</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> prettier </tag>
            
            <tag> vscode </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrate Prettier With Stylelint in VSCode</title>
      <link href="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/"/>
      <url>/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/</url>
      
        <content type="html"><![CDATA[<h2 id="With-VSCode-intergrate-stylelint-is-super-easy-just-follow-steps-below-and-you’re-all-set"><a href="#With-VSCode-intergrate-stylelint-is-super-easy-just-follow-steps-below-and-you’re-all-set" class="headerlink" title="With VSCode, intergrate stylelint is super easy, just follow steps below and you’re all set."></a>With VSCode, intergrate stylelint is super easy, just follow steps below and you’re all set.</h2><h3 id="Install-vscode-extensions"><a href="#Install-vscode-extensions" class="headerlink" title="Install vscode extensions"></a>Install vscode extensions</h3><p>There are two required vscode extensions:</p><ol><li>prettier</li><li>stylelint</li></ol><h3 id="Install-packages"><a href="#Install-packages" class="headerlink" title="Install packages"></a>Install packages</h3><p>Choose your favorite package manager and install dependecies like below<br><a href="https://www.npmjs.com/package/stylelint-config-standard" target="_blank" rel="noopener">stylelint-config-standard</a><br><a href="https://www.npmjs.com/package/prettier-stylelint" target="_blank" rel="noopener">prettier-stylelint</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier-stylelint stylelint-config-standard --dev</span><br></pre></td></tr></table></figure><p>stylelint-config-standard is just one of many stylint configurations, you can use any ones you prefer. </p><a id="more"></a><h3 id="Create-stylelintrc-and-prettierrc-files-at-the-root-of-your-project"><a href="#Create-stylelintrc-and-prettierrc-files-at-the-root-of-your-project" class="headerlink" title="Create .stylelintrc and .prettierrc files at the root of your project"></a>Create .stylelintrc and .prettierrc files at the root of your project</h3><p>.stylelintrc file should look at least like this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"extends"</span>:<span class="string">"stylelint-config-standard"</span>,</span><br><span class="line">    // extends is the configuration package we installed,</span><br><span class="line">    // you can choose your own configuration package and update here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>.prettierrc file looks like this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // <span class="string">"printWidth"</span>: 100,</span><br><span class="line">   // <span class="string">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">   // <span class="string">"trailingComma"</span>: <span class="string">"all"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can leave as an empty object or define more personal settings in here, your vscode prettier extension is going to pick those<br>up and use with stylelint configurations.</p><h3 id="Update-your-vscode-extension-settings"><a href="#Update-your-vscode-extension-settings" class="headerlink" title="Update your vscode extension settings"></a>Update your vscode extension settings</h3><ol><li><p>Go to your vscode setting and navigate to text-editor section and click on formatting, then tick format on save option.</p><img src="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/format-on-save.jpg" title="This is an example image"></li><li><p>Go to vscode setting and navigate to extension section, find your prettier tab and click on it.<br>Scroll down the settings and find this option and tick.</p><img src="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/use-stylelint.jpg" title="This is an example image"></li></ol><p>This should be it! Go mess up one css or scss file and save it, you should see the file being formatted on saving.</p><h3 id="Before-wrap-it-up"><a href="#Before-wrap-it-up" class="headerlink" title="Before wrap it up"></a>Before wrap it up</h3><p>It would be nice for us to setup a script to format all existing files.</p><p>Add script to your package.json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">   <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">   <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">   <span class="string">"fix-styles"</span>: <span class="string">"prettier-stylelint --write 'src/**/*.&#123;css,scss&#125;' "</span></span><br><span class="line">   //You can update your directory <span class="keyword">if</span> it needs to</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>Now if open your project terminal and run below<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn fix-styles // or npm fix-styles</span><br></pre></td></tr></table></figure></p><p>You should have all your css and scss files formatted.</p><h3 id="Optional-but-useful"><a href="#Optional-but-useful" class="headerlink" title="Optional but useful"></a>Optional but useful</h3><p>It’s likely that you have third party styling files inside your project, and you may not need to format these.<br>We can set up rules to ignore them. There are two options:</p><ol><li><p>In your .stylelintrc add ignoreFiles</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"extends"</span>:<span class="string">"stylelint-config-standard"</span>,</span><br><span class="line">   <span class="string">"ignoreFiles"</span>: <span class="string">"./src/static/**"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create .stylelintignore file in the root directory and then add routes you’d like to ignore (just like .gitignore)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/static/**</span><br></pre></td></tr></table></figure></li></ol><p>More information on how to configure your stylelint rules, <a href="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/configuration.md" target="_blank" rel="noopener">here</a></p>]]></content>
      
      
      <categories>
          
          <category> tooling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chainable Bem Modifier</title>
      <link href="/2019/04/15/chainable-bem-modifier/"/>
      <url>/2019/04/15/chainable-bem-modifier/</url>
      
        <content type="html"><![CDATA[<h2 id="Chainable-BEM-Modifier-for-SCSS"><a href="#Chainable-BEM-Modifier-for-SCSS" class="headerlink" title="Chainable BEM Modifier for SCSS"></a>Chainable BEM Modifier for SCSS</h2><p>Disclaimer: All following information is coming from Jordan Lewis’s <a href="https://webuild.envato.com/blog/chainable-bem-modifiers/" target="_blank" rel="noopener">post</a><br>I just happened to use this style of writting scss code to make my life little bit easier.</p><h3 id="Some-information-about-BEM-syntax"><a href="#Some-information-about-BEM-syntax" class="headerlink" title="Some information about BEM syntax"></a>Some information about BEM syntax</h3><p><a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">BEM</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block__element--modifier</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>for example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.site-search &#123;&#125; /* Block */</span><br><span class="line">.site-search__field &#123;&#125; /* Element */</span><br><span class="line">.site-search--full &#123;&#125; /* Modifier */</span><br></pre></td></tr></table></figure></p><h3 id="With-Chainable-BEM-Modifier-it’s-just-easier-and-prettier-to-write-and-understand"><a href="#With-Chainable-BEM-Modifier-it’s-just-easier-and-prettier-to-write-and-understand" class="headerlink" title="With Chainable BEM Modifier, it’s just easier and prettier to write and understand"></a>With Chainable BEM Modifier, it’s just easier and prettier to write and understand</h3><p>The general format of C-BEM-Modifier is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js-hook block__element--variation -modifier h-helper is-state</span><br></pre></td></tr></table></figure></p><p><b>JS Hooks</b> are prefixed with js- and do not have any styles. Their whole purpose is to be used in JavaScript to target elements in the DOM.</p><p>One example out of the code block below is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.game-pane__cell-container--green-cell -is-activated</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// `&amp;` below is <span class="string">'game-pane'</span></span><br><span class="line">  &amp;__cell-container &#123;</span><br><span class="line">        border: 1px <span class="comment">#d1c1c1 solid;</span></span><br><span class="line">        height: 20px;</span><br><span class="line">        width: 20px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        background-color: <span class="comment">#fff;</span></span><br><span class="line">        cursor: pointer;</span><br><span class="line">        &amp;.--green-cell &#123;</span><br><span class="line">            background-color: rgb(50, 119, 68);</span><br><span class="line"></span><br><span class="line">            &amp;.-is-activated &#123;</span><br><span class="line">                 animation: cellActivating 0.25s;           </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set Up and Publish a Personal Blog in 15 Mins</title>
      <link href="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/"/>
      <url>/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/</url>
      
        <content type="html"><![CDATA[<h2 id="First-blog-isn’t-about-a-touching-tale"><a href="#First-blog-isn’t-about-a-touching-tale" class="headerlink" title="First blog isn’t about a touching tale"></a>First blog isn’t about a touching tale</h2><p>I’d just like to share the steps I’ve taken to set up this simple but very handy personal blog. </p><p>There is going to be three main sections of this blog</p><ol><li>Set up blog with <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> on your machine’s local environment</li><li>Publish and host your blog to free github <a href="https://pages.github.com/" target="_blank" rel="noopener">page</a></li><li>Add custom domain to your github io page, e.g. <a href="https://au.godaddy.com/" target="_blank" rel="noopener">goDaddy</a> and <a href="https://www.namecheap.com/" target="_blank" rel="noopener">nameCheap</a></li></ol><a id="more"></a><h3 id="Build-blog-with-Hexo"><a href="#Build-blog-with-Hexo" class="headerlink" title="Build blog with Hexo"></a>Build blog with Hexo</h3><p>Hexo has a very no BS <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a>, but maybe I just make it simpler for you.</p><ol><li>Install Node.js and Git if you have not, and make sure the version of the node is later than v6.9</li><li><p>Run this command to install Hexo command line tool</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>Use command line initialize the blog project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Use terminal go to the folder you&apos;d like to create the project and then run followings:</span><br><span class="line"></span><br><span class="line">$hexo init NAME-OF-YOUR-BLOG</span><br><span class="line">$cd NAME-OF-YOUR-BLOG</span><br><span class="line">$npm install</span><br></pre></td></tr></table></figure></li><li><p>Run it with local server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ol><p>And open localhost:4000 inside your browser, and you will see your blog up and running.<br>You should see at the index page, there is one blog existed and named Helloworld. It’s generated for you as an example.</p><ol start="5"><li>More terminal commands, please check this <a href="https://hexo.io/docs/commands.html" target="_blank" rel="noopener">document</a>.</li></ol><hr><h3 id="Publish-to-github-page"><a href="#Publish-to-github-page" class="headerlink" title="Publish to github page"></a>Publish to github page</h3><ol><li>Go to github and log in with your account</li><li>Confirm your github account name, for example, mine is “isaacloft”. Reason for confirming this is that<br>we can only create one free github page and the name of the repo has to be YOUR-GITHUB-NAME.github.io</li><li>Create a new repo like the screenshot below:<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/create-github-io.jpg" title="This is an example image"></li><li><p>Go back to teriminal and navigate into your project folder, install this helper package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>Go to your project top level and open _config.yml file, at the end of that file add following lines</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> repo: https://github.com/YOURGITHUBREPO/YOURGITHUBNAME.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure></li><li><p>Everytime before publishing, we need to run generate command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p> I normally run the command below quite often just to clean up and generate final files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li><p>Second last step, publish to github.io</p><p> Before we proceed, you may want to check your git command line config.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure><pre><code>make sure the outputs are same as your github account infoIf you haven&apos;t set it up properly, please see [this](https://help.github.com/en/articles/setting-your-commit-email-address-in-git)Code to deploy</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><pre><code>The deployment may take a few seconds or minutes</code></pre><ol start="8"><li>Check your repo settings to make your github.io page live<br> Go to your repo setting page<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/io-setting.jpg" title="This is an example image"> scroll down to this section<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/io-domain.jpg" title="This is an example image"> If you see something similar, great, it should be done. Just click on the link and go to your own blog.</li></ol><hr><h3 id="Use-your-custom-domain-name-with-github-io"><a href="#Use-your-custom-domain-name-with-github-io" class="headerlink" title="Use your custom domain name with github.io"></a>Use your custom domain name with github.io</h3><p>Using custom domain name with github got a lot easier now, and github.io even enforces https for us and no charge.<br>What we need to do is below</p><ol><li>Go to your domain provider, in my case, nameCheap.com</li><li>Go to DNS management section (name can vary from provides), on nameCheap.com it’s called Advanced DNS…really?</li><li>Add below four A records and one CNAME record<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/custom-domain.jpg" title="This is an example image"><h4 id="Note-Double-check-if-there-is-any-other-A-or-CNAME-record-which-may-affect-your-github-domain-name-binding"><a href="#Note-Double-check-if-there-is-any-other-A-or-CNAME-record-which-may-affect-your-github-domain-name-binding" class="headerlink" title="Note: Double check if there is any other A or CNAME record, which may affect your github-domain name binding"></a>Note: Double check if there is any other A or CNAME record, which may affect your github-domain name binding</h4></li><li>Go back to your github.io setting, and add your custom domain name<br> For example: binarytellsnotales.com</li></ol><img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/add-domain-to-io.jpg" title="This is an example image"><p>If you see any error messages, it’s possibly caused by DNS delay, which may take up to 24 hours to be reflected.</p><p><b>Update!!</b><br>The github page custom domain would be reset after each deployment, the solution is to include a CNAME file <b>inside</b><br>your <b>soruce</b> folder.</p><p>github <a href="https://github.com/hexojs/hexo-deployer-git/issues/87" target="_blank" rel="noopener">issue</a></p><h2 id="I-guess-this-is-it-for-now-if-any-question-or-feedback-please-feel-free-to-leave-a-comment"><a href="#I-guess-this-is-it-for-now-if-any-question-or-feedback-please-feel-free-to-leave-a-comment" class="headerlink" title="I guess this is it for now, if any question or feedback, please feel free to leave a comment."></a>I guess this is it for now, if any question or feedback, please feel free to leave a comment.</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
