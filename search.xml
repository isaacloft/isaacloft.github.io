<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Code Challenge: Conway&#39;s Game of Life</title>
      <link href="/2019/05/03/Code-Challenge-Conway-s-Game-of-Life/"/>
      <url>/2019/05/03/Code-Challenge-Conway-s-Game-of-Life/</url>
      
        <content type="html"><![CDATA[<h4 id="Complete-code-challenge-Conway’s-game-of-life-aka-cell-simulator-using-react-hooks-and-typescript"><a href="#Complete-code-challenge-Conway’s-game-of-life-aka-cell-simulator-using-react-hooks-and-typescript" class="headerlink" title="Complete code challenge: Conway’s game of life, aka cell simulator, using react hooks and typescript"></a>Complete code challenge: Conway’s game of life, aka cell simulator, using react hooks and typescript</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jZWxsLXNpbXVsYXRvci5oZXJva3VhcHAuY29tLw==" title="https://cell-simulator.herokuapp.com/">Demo on Heroku<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lzYWFjbG9mdC9DZWxsLVNpbXVsYXRvcg==" title="https://github.com/isaacloft/Cell-Simulator">Github<i class="fa fa-external-link"></i></span></p><p>Recently I’ve been given this code challenge, I feel this is one of the best code challenges I’ve ever come across, as it needs the challenger to have a good overall frontend knowledge and practical problem solving skills.<br><a id="more"></a></p><p>If requirements include which frontend framework to use, which scss convention to follow, it can take good hours to complete.</p><p>A brief requirement of <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29ud2F5JTI3c19HYW1lX29mX0xpZmU=" title="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway’s game of life<i class="fa fa-external-link"></i></span><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">The <span class="string">"game"</span> is a zero-player game, meaning that its evolution is determined by its initial state, </span><br><span class="line">requiring no further input. One interacts with the Cell Simulator by creating an initial configuration </span><br><span class="line">and observing how it evolves.</span><br><span class="line"></span><br><span class="line">How cells evolve:</span><br><span class="line">Each cell can have two state, live or dead. </span><br><span class="line">- When the game is running:</span><br><span class="line">  - A Cell with &lt;2 live neighbours is <span class="built_in">set</span> to dead</span><br><span class="line">  - A Cell with 2 or 3 live neighbours lives</span><br><span class="line">  - A Cell with &gt;3 live neighbours is <span class="built_in">set</span> to dead</span><br><span class="line">  - A dead Cell with exactly 3 live neighbours is <span class="built_in">set</span> to live</span><br><span class="line">  - A Cell who <span class="string">"comes to life"</span> outside the board should wrap at the other side of the board.</span><br><span class="line">    (Just like the Snake, the cell can travel from left edge to right edge)</span><br><span class="line"></span><br><span class="line">- Once the next generation is <span class="keyword">done</span>, User can trigger <span class="string">"next generation"</span> again.</span><br><span class="line"></span><br><span class="line">ACs</span><br><span class="line">- At initial state, User should see an empty board.</span><br><span class="line">- User can make Cells <span class="string">"alive"</span>.</span><br><span class="line">- User can make Cells <span class="string">"dead"</span>.</span><br><span class="line">- User can trigger <span class="string">"next generation"</span>.</span><br><span class="line">- User can trigger a <span class="string">"reset"</span> to the initial state.</span><br></pre></td></tr></table></figure></p><p>My solution uses: </p><ul><li>React</li><li>React hooks</li><li>Typescript</li><li>Create My React App with Typescript</li><li>SCSS and <a href="https://binarytellsnotales.com/2019/04/15/chainable-bem-modifier/">Chainable BEM Modifier</a></li><li>Inlcude TSLint and StyleLint</li></ul><h4 id="One-thing-to-be-careful-with-Data-mutation"><a href="#One-thing-to-be-careful-with-Data-mutation" class="headerlink" title="One thing to be careful with: Data mutation"></a>One thing to be careful with: Data mutation</h4><p>When writing the algorithm to update the state of cells, we have to understand all existing cells,<br>either dead or live, should check number of neighbors at the same time. </p><p>My javascript translation is that our code should be able to keep a copy of cell array to check against with. I did it wrong at first place because in side the loop, cells are being updated one by one, which means the following cells are checking against <b>“updated predecessor”</b>, while what we really should have is that every single cell checking against the original cell states. If its state needs update, we dont mutate directly, but save it somewhere else.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cellEvolve = <span class="function">(<span class="params">cell: ICell</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// We make a new copy of original cell using spread operator</span></span><br><span class="line">    <span class="keyword">const</span> newCell = &#123; ...cell &#125;;</span><br><span class="line">    <span class="keyword">if</span> (cell.isActivated) &#123;</span><br><span class="line">      <span class="keyword">if</span> (countNeighbours(cell.x, cell.y, cell.id) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        newCell.isActivated = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (countNeighbours(cell.x, cell.y, cell.id) === <span class="number">2</span> || countNeighbours(cell.x, cell.y, cell.id) === <span class="number">3</span>) &#123;</span><br><span class="line">        newCell.isActivated = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (countNeighbours(cell.x, cell.y, cell.id) &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        newCell.isActivated = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (countNeighbours(cell.x, cell.y, cell.id) === <span class="number">3</span>) &#123;</span><br><span class="line">        newCell.isActivated = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// When we done checking against rules, we return the newCell.</span></span><br><span class="line">    <span class="keyword">return</span> newCell;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p>Rest of the coding are pretty straightforward, we can even add some fancy effects to the change of the cell states.</p><p>Cheers,</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
            <tag> typescript </tag>
            
            <tag> react </tag>
            
            <tag> react hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Use Media Query Selector: Prefers-Reduced-Motion to Improve Accessibility</title>
      <link href="/2019/05/02/Use-Media-Query-Selector-prefers-reduced-motion-to-improve-accessibility/"/>
      <url>/2019/05/02/Use-Media-Query-Selector-prefers-reduced-motion-to-improve-accessibility/</url>
      
        <content type="html"><![CDATA[<h4 id="This-article-is-more-of-a-FYI-for-myself-as-the-google-doc-is-very-thorough"><a href="#This-article-is-more-of-a-FYI-for-myself-as-the-google-doc-is-very-thorough" class="headerlink" title="This article is more of a FYI for myself as the google doc is very thorough."></a>This article is more of a FYI for myself as the google doc is very thorough.</h4><p><i>“Animation on the web<br>Animation is oftentimes used to provide feedback to the user …….  there are decorative effects like animated gradients, parallax scrolling, background videos, and several others. While many users enjoy such animations, some users dislike them because they feel distracted or slowed down from them. In the worst case, users may even suffer from motion sickness as if it were a real life experience, so for these users reducing animations is a medical necessity.” <i></i></i></p><p>Articles I found useful: </p><ol><li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxOS8wMy9wcmVmZXJzLXJlZHVjZWQtbW90aW9u" title="https://developers.google.com/web/updates/2019/03/prefers-reduced-motion">On Google Developer Doc<i class="fa fa-external-link"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9pbnRyb2R1Y3Rpb24tcmVkdWNlZC1tb3Rpb24tbWVkaWEtcXVlcnkv" title="https://css-tricks.com/introduction-reduced-motion-media-query/">CSS tricks<i class="fa fa-external-link"></i></span></li></ol><a id="more"></a><h3 id="Long-story-short"><a href="#Long-story-short" class="headerlink" title="Long story short"></a>Long story short</h3><p>One simple implementation:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  If the user has expressed their preference for</span></span><br><span class="line"><span class="comment">  reduced motion, then don't use animations on buttons.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">media</span> (prefers-reduced-motion: reduce) &#123;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  If the browser understands the media query and the user</span></span><br><span class="line"><span class="comment">  explicitly hasn't set a preference, then use animations on buttons.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">@<span class="keyword">media</span> (prefers-reduced-motion: no-preference) &#123;</span><br><span class="line">  <span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="comment">/* `vibrate` keyframes are defined elsewhere */</span></span><br><span class="line">    <span class="attribute">animation</span>: vibrate <span class="number">0.3s</span> linear infinite both;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="To-test-this-we-have-to-enable-accessibility-feature-on-devices-such-as-on-Mac-gt-Accessibility-gt-Display-gt-Reduce-Motion"><a href="#To-test-this-we-have-to-enable-accessibility-feature-on-devices-such-as-on-Mac-gt-Accessibility-gt-Display-gt-Reduce-Motion" class="headerlink" title="To test this, we have to enable accessibility feature on devices, such as on Mac -&gt; Accessibility -&gt; Display -&gt; Reduce Motion"></a>To test this, we have to enable accessibility feature on devices, such as on Mac -&gt; Accessibility -&gt; Display -&gt; Reduce Motion</h3>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
            <tag> accessibility </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prettier-Eslint-Cli Does Not Format Anything in Powershell</title>
      <link href="/2019/05/01/prettier-eslint-cli-does-not-format-anything-in-powershell/"/>
      <url>/2019/05/01/prettier-eslint-cli-does-not-format-anything-in-powershell/</url>
      
        <content type="html"><![CDATA[<h4 id="prettier-eslint-and-prettier-stylelint-work-inside-bash-and-zsh-not-in-powershell-or-cmd"><a href="#prettier-eslint-and-prettier-stylelint-work-inside-bash-and-zsh-not-in-powershell-or-cmd" class="headerlink" title="prettier-eslint and prettier-stylelint work inside bash and zsh, not in powershell or cmd"></a>prettier-eslint and prettier-stylelint work inside bash and zsh, not in powershell or cmd</h4><p>Long story short, I’ve set up eslint and stylelint for one project weeks back and everything ran perfectly on MACs, until we ran it inside powershell and cmd, it output nothing. It almost felt like no file is to be formatted.</p><p>Scripts we had inside package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "fix-style": "prettier-stylelint --write 'src/**/*.&#123;css,scss&#125;' ",</span><br><span class="line">    "fix-code": "prettier-eslint --write 'src/**/*.&#123;js,jsx&#125;' "</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>After a couple hours of research, I accidentally saw this code on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVyLWVzbGludC1jbGk=" title="https://github.com/prettier/prettier-eslint-cli">prettier-eslint-cli<i class="fa fa-external-link"></i></span>, and I gave it a go. It worked..<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">   "format": "prettier-eslint \"src/**/*.js\""</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>Turns out, nothing wrong with dependencies, neither plugins in vscode. It just in powershell, double quote and single quote have different functions. Still not 100% sure, but it is very likely to relate to this <span class="exturl" data-url="aHR0cHM6Ly9kZXZibG9ncy5taWNyb3NvZnQuY29tL3NjcmlwdGluZy93ZWVrZW5kLXNjcmlwdGVyLXVuZGVyc3RhbmRpbmctcXVvdGF0aW9uLW1hcmtzLWluLXBvd2Vyc2hlbGwv" title="https://devblogs.microsoft.com/scripting/weekend-scripter-understanding-quotation-marks-in-powershell/">topic<i class="fa fa-external-link"></i></span></p><p>To fix this issue, we simply updated the script to<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"fix-style"</span>: <span class="string">"prettier-stylelint --write \"src/**/*.&#123;css,scss&#125;\" "</span>,</span><br><span class="line"><span class="string">"fix-code"</span>: <span class="string">"prettier-eslint --write \"src/**/*.&#123;js,jsx&#125;\" "</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> prettier </tag>
            
            <tag> vscode </tag>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integrate Prettier With Stylelint in VSCode</title>
      <link href="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/"/>
      <url>/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/</url>
      
        <content type="html"><![CDATA[<h4 id="With-VSCode-intergrate-stylelint-is-super-easy-just-follow-steps-below-and-you’re-all-set"><a href="#With-VSCode-intergrate-stylelint-is-super-easy-just-follow-steps-below-and-you’re-all-set" class="headerlink" title="With VSCode, intergrate stylelint is super easy, just follow steps below and you’re all set."></a>With VSCode, intergrate stylelint is super easy, just follow steps below and you’re all set.</h4><h4 id="Install-vscode-extensions"><a href="#Install-vscode-extensions" class="headerlink" title="Install vscode extensions"></a>Install vscode extensions</h4><p>There are two required vscode extensions:</p><ol><li>prettier</li><li>stylelint</li></ol><h4 id="Install-packages"><a href="#Install-packages" class="headerlink" title="Install packages"></a>Install packages</h4><p>Choose your favorite package manager and install dependecies like below<br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvc3R5bGVsaW50LWNvbmZpZy1zdGFuZGFyZA==" title="https://www.npmjs.com/package/stylelint-config-standard">stylelint-config-standard<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJldHRpZXItc3R5bGVsaW50" title="https://www.npmjs.com/package/prettier-stylelint">prettier-stylelint<i class="fa fa-external-link"></i></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier-stylelint stylelint-config-standard --dev</span><br></pre></td></tr></table></figure><p>stylelint-config-standard is just one of many stylint configurations, you can use any ones you prefer. </p><a id="more"></a><h4 id="Create-stylelintrc-and-prettierrc-files-at-the-root-of-your-project"><a href="#Create-stylelintrc-and-prettierrc-files-at-the-root-of-your-project" class="headerlink" title="Create .stylelintrc and .prettierrc files at the root of your project"></a>Create .stylelintrc and .prettierrc files at the root of your project</h4><p>.stylelintrc file should look at least like this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"extends"</span>:<span class="string">"stylelint-config-standard"</span>,</span><br><span class="line">    // extends is the configuration package we installed,</span><br><span class="line">    // you can choose your own configuration package and update here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>.prettierrc file looks like this<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   // <span class="string">"printWidth"</span>: 100,</span><br><span class="line">   // <span class="string">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">   // <span class="string">"trailingComma"</span>: <span class="string">"all"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>You can leave as an empty object or define more personal settings in here, your vscode prettier extension is going to pick those<br>up and use with stylelint configurations.</p><h4 id="Update-your-vscode-extension-settings"><a href="#Update-your-vscode-extension-settings" class="headerlink" title="Update your vscode extension settings"></a>Update your vscode extension settings</h4><ol><li><p>Go to your vscode setting and navigate to text-editor section and click on formatting, then tick format on save option.</p><img src="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/format-on-save.jpg" title="This is an example image"></li><li><p>Go to vscode setting and navigate to extension section, find your prettier tab and click on it.<br>Scroll down the settings and find this option and tick.</p><img src="/2019/04/16/Integrate-prettier-with-stylelint-in-VSCode/use-stylelint.jpg" title="This is an example image"></li></ol><p>This should be it! Go mess up one css or scss file and save it, you should see the file being formatted on saving.</p><h4 id="Before-wrap-it-up"><a href="#Before-wrap-it-up" class="headerlink" title="Before wrap it up"></a>Before wrap it up</h4><p>It would be nice for us to setup a script to format all existing files.</p><p>Add script to your package.json<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">   <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"react-scripts test"</span>,</span><br><span class="line">   <span class="string">"eject"</span>: <span class="string">"react-scripts eject"</span>,</span><br><span class="line">   <span class="string">"fix-styles"</span>: <span class="string">"prettier-stylelint --write 'src/**/*.&#123;css,scss&#125;' "</span></span><br><span class="line">   //You can update your directory <span class="keyword">if</span> it needs to</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>Now if open your project terminal and run below<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn fix-styles // or npm fix-styles</span><br></pre></td></tr></table></figure></p><p>You should have all your css and scss files formatted.</p><h4 id="Optional-but-useful"><a href="#Optional-but-useful" class="headerlink" title="Optional but useful"></a>Optional but useful</h4><p>It’s likely that you have third party styling files inside your project, and you may not need to format these.<br>We can set up rules to ignore them. There are two options:</p><ol><li><p>In your .stylelintrc add ignoreFiles</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"extends"</span>:<span class="string">"stylelint-config-standard"</span>,</span><br><span class="line">   <span class="string">"ignoreFiles"</span>: <span class="string">"./src/static/**"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create .stylelintignore file in the root directory and then add routes you’d like to ignore (just like .gitignore)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/static/**</span><br></pre></td></tr></table></figure></li></ol><p>More information on how to configure your stylelint rules, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3N0eWxlbGludC9zdHlsZWxpbnQvYmxvYi9tYXN0ZXIvZG9jcy91c2VyLWd1aWRlL2NvbmZpZ3VyYXRpb24ubWQ=" title="https://github.com/stylelint/stylelint/blob/master/docs/user-guide/configuration.md">here<i class="fa fa-external-link"></i></span></p>]]></content>
      
      
      <categories>
          
          <category> tooling </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chainable Bem Modifier</title>
      <link href="/2019/04/15/chainable-bem-modifier/"/>
      <url>/2019/04/15/chainable-bem-modifier/</url>
      
        <content type="html"><![CDATA[<h4 id="Chainable-BEM-Modifier-for-SCSS"><a href="#Chainable-BEM-Modifier-for-SCSS" class="headerlink" title="Chainable BEM Modifier for SCSS"></a>Chainable BEM Modifier for SCSS</h4><p>Disclaimer: All following information is coming from Jordan Lewis’s <span class="exturl" data-url="aHR0cHM6Ly93ZWJ1aWxkLmVudmF0by5jb20vYmxvZy9jaGFpbmFibGUtYmVtLW1vZGlmaWVycy8=" title="https://webuild.envato.com/blog/chainable-bem-modifiers/">post<i class="fa fa-external-link"></i></span><br>I just happened to use this style of writting scss code to make my life little bit easier.</p><h4 id="Some-information-about-BEM-syntax"><a href="#Some-information-about-BEM-syntax" class="headerlink" title="Some information about BEM syntax"></a>Some information about BEM syntax</h4><p><span class="exturl" data-url="aHR0cHM6Ly9jc3N3aXphcmRyeS5jb20vMjAxMy8wMS9taW5kYmVtZGluZy1nZXR0aW5nLXlvdXItaGVhZC1yb3VuZC1iZW0tc3ludGF4Lw==" title="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/">BEM<i class="fa fa-external-link"></i></span><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block__element--modifier</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>for example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.site-search &#123;&#125; /* Block */</span><br><span class="line">.site-search__field &#123;&#125; /* Element */</span><br><span class="line">.site-search--full &#123;&#125; /* Modifier */</span><br></pre></td></tr></table></figure></p><h4 id="With-Chainable-BEM-Modifier-it’s-just-easier-and-prettier-to-write-and-understand"><a href="#With-Chainable-BEM-Modifier-it’s-just-easier-and-prettier-to-write-and-understand" class="headerlink" title="With Chainable BEM Modifier, it’s just easier and prettier to write and understand"></a>With Chainable BEM Modifier, it’s just easier and prettier to write and understand</h4><p>The general format of C-BEM-Modifier is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js-hook block__element--variation -modifier h-helper is-state</span><br></pre></td></tr></table></figure></p><p><b>JS Hooks</b> are prefixed with js- and do not have any styles. Their whole purpose is to be used in JavaScript to target elements in the DOM.</p><p>One example out of the code block below is:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.game-pane__cell-container--green-cell -is-activated</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// `&amp;` below is <span class="string">'game-pane'</span></span><br><span class="line">  &amp;__cell-container &#123;</span><br><span class="line">        border: 1px <span class="comment">#d1c1c1 solid;</span></span><br><span class="line">        height: 20px;</span><br><span class="line">        width: 20px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">        background-color: <span class="comment">#fff;</span></span><br><span class="line">        cursor: pointer;</span><br><span class="line">        &amp;.--green-cell &#123;</span><br><span class="line">            background-color: rgb(50, 119, 68);</span><br><span class="line"></span><br><span class="line">            &amp;.-is-activated &#123;</span><br><span class="line">                 animation: cellActivating 0.25s;           </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set Up and Publish a Personal Blog in 15 Mins</title>
      <link href="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/"/>
      <url>/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/</url>
      
        <content type="html"><![CDATA[<h4 id="First-blog-isn’t-about-a-touching-tale"><a href="#First-blog-isn’t-about-a-touching-tale" class="headerlink" title="First blog isn’t about a touching tale"></a>First blog isn’t about a touching tale</h4><p>I’d just like to share the steps I’ve taken to set up this simple but very handy personal blog. </p><p>There is going to be three main sections of this blog</p><ol><li>Set up blog with <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==" title="https://hexo.io/">Hexo<i class="fa fa-external-link"></i></span> on your machine’s local environment</li><li>Publish and host your blog to free github <span class="exturl" data-url="aHR0cHM6Ly9wYWdlcy5naXRodWIuY29tLw==" title="https://pages.github.com/">page<i class="fa fa-external-link"></i></span></li><li>Add custom domain to your github io page, e.g. <span class="exturl" data-url="aHR0cHM6Ly9hdS5nb2RhZGR5LmNvbS8=" title="https://au.godaddy.com/">goDaddy<i class="fa fa-external-link"></i></span> and <span class="exturl" data-url="aHR0cHM6Ly93d3cubmFtZWNoZWFwLmNvbS8=" title="https://www.namecheap.com/">nameCheap<i class="fa fa-external-link"></i></span></li></ol><a id="more"></a><h4 id="Build-blog-with-Hexo"><a href="#Build-blog-with-Hexo" class="headerlink" title="Build blog with Hexo"></a>Build blog with Hexo</h4><p>Hexo has a very no BS <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv" title="https://hexo.io/docs/">documentation<i class="fa fa-external-link"></i></span>, but maybe I just make it simpler for you.</p><ol><li>Install Node.js and Git if you have not, and make sure the version of the node is later than v6.9</li><li><p>Run this command to install Hexo command line tool</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>Use command line initialize the blog project</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//Use terminal go to the folder you&apos;d like to create the project and then run followings:</span><br><span class="line"></span><br><span class="line">$hexo init NAME-OF-YOUR-BLOG</span><br><span class="line">$cd NAME-OF-YOUR-BLOG</span><br><span class="line">$npm install</span><br></pre></td></tr></table></figure></li><li><p>Run it with local server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li></ol><p>And open localhost:4000 inside your browser, and you will see your blog up and running.<br>You should see at the index page, there is one blog existed and named Helloworld. It’s generated for you as an example.</p><ol start="5"><li>More terminal commands, please check this <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvY29tbWFuZHMuaHRtbA==" title="https://hexo.io/docs/commands.html">document<i class="fa fa-external-link"></i></span>.</li></ol><hr><h3 id="Publish-to-github-page"><a href="#Publish-to-github-page" class="headerlink" title="Publish to github page"></a>Publish to github page</h3><ol><li>Go to github and log in with your account</li><li>Confirm your github account name, for example, mine is “isaacloft”. Reason for confirming this is that<br>we can only create one free github page and the name of the repo has to be YOUR-GITHUB-NAME.github.io</li><li>Create a new repo like the screenshot below:<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/create-github-io.jpg" title="This is an example image"></li><li><p>Go back to teriminal and navigate into your project folder, install this helper package</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>Go to your project top level and open _config.yml file, at the end of that file add following lines</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> <span class="built_in">type</span>: git</span><br><span class="line"> repo: https://github.com/YOURGITHUBREPO/YOURGITHUBNAME.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure></li><li><p>Everytime before publishing, we need to run generate command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p> I normally run the command below quite often just to clean up and generate final files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure></li><li><p>Second last step, publish to github.io</p><p> Before we proceed, you may want to check your git command line config.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name</span><br><span class="line">$ git config --global user.email</span><br></pre></td></tr></table></figure><pre><code>make sure the outputs are same as your github account infoIf you haven&apos;t set it up properly, please see [this](https://help.github.com/en/articles/setting-your-commit-email-address-in-git)Code to deploy</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><pre><code>The deployment may take a few seconds or minutes</code></pre><ol start="8"><li>Check your repo settings to make your github.io page live<br> Go to your repo setting page<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/io-setting.jpg" title="This is an example image"> scroll down to this section<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/io-domain.jpg" title="This is an example image"> If you see something similar, great, it should be done. Just click on the link and go to your own blog.</li></ol><hr><h3 id="Use-your-custom-domain-name-with-github-io"><a href="#Use-your-custom-domain-name-with-github-io" class="headerlink" title="Use your custom domain name with github.io"></a>Use your custom domain name with github.io</h3><p>Using custom domain name with github got a lot easier now, and github.io even enforces https for us and no charge.<br>What we need to do is below</p><ol><li>Go to your domain provider, in my case, nameCheap.com</li><li>Go to DNS management section (name can vary from provides), on nameCheap.com it’s called Advanced DNS…really?</li><li>Add below four A records and one CNAME record<img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/custom-domain.jpg" title="This is an example image"><h4 id="Note-Double-check-if-there-is-any-other-A-or-CNAME-record-which-may-affect-your-github-domain-name-binding"><a href="#Note-Double-check-if-there-is-any-other-A-or-CNAME-record-which-may-affect-your-github-domain-name-binding" class="headerlink" title="Note: Double check if there is any other A or CNAME record, which may affect your github-domain name binding"></a>Note: Double check if there is any other A or CNAME record, which may affect your github-domain name binding</h4></li><li>Go back to your github.io setting, and add your custom domain name<br> For example: binarytellsnotales.com</li></ol><img src="/2019/04/15/Set-up-and-publish-a-personal-blog-in-15-mins/add-domain-to-io.jpg" title="This is an example image"><p>If you see any error messages, it’s possibly caused by DNS delay, which may take up to 24 hours to be reflected.</p><p><b>Update!!</b><br>The github page custom domain would be reset after each deployment, the solution is to include a CNAME file <b>inside</b><br>your <b>soruce</b> folder.</p><p>github <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWRlcGxveWVyLWdpdC9pc3N1ZXMvODc=" title="https://github.com/hexojs/hexo-deployer-git/issues/87">issue<i class="fa fa-external-link"></i></span></p><h2 id="I-guess-this-is-it-for-now-if-any-question-or-feedback-please-feel-free-to-leave-a-comment"><a href="#I-guess-this-is-it-for-now-if-any-question-or-feedback-please-feel-free-to-leave-a-comment" class="headerlink" title="I guess this is it for now, if any question or feedback, please feel free to leave a comment."></a>I guess this is it for now, if any question or feedback, please feel free to leave a comment.</h2>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
